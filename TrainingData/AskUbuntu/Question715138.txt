[{"id":715138,"title":"How do I find all custom-created symbolic links in the entire system?","body":"<p>I've created several symbolic links in different places.</p>\n\n<p>I can't really recall where each one of them is in the system and I've already removed programs they are associated with.</p>\n\n<p>Is there a script / program / whatever that can search the entire system and remove any symlink which is custom-created?</p>\n","related_questions":[{"id":667583,"title":"Simple way to delete a file and all its links (simultaneously)","body":"<p>I found a lot of questions on how to delete symlinks only, or delete symlinks based on their contents, but no one has asked how to do what I want to do.</p>\n\n<p>Take the following example</p>\n\n<pre><code>file-l -&gt; ../file\nfile-l2 -&gt; ../file\n</code></pre>\n\n<p>I want to delete <code>file</code>, <code>file-l</code>, and <code>file-l2</code> in one fell swoop, without knowing the locations of the other files, preferably by specifying <code>file</code> as an argument. (imagine that I have 100+ links to the same file in random places all over the filesystem). Primarily, I would prefer a shell script or built-in program, but external programs are also okay.</p>\n\n<p>After <code>unlink</code> and <code>rm</code> failed to provide the desired functionality, I initially had the idea to use <code>inodes</code> or <code>stat</code> or something, but...</p>\n\n<pre><code>$ stat test\n  File: ‘test’\n  Size: 0           Blocks: 0          IO Block: 4096   regular empty file\nDevice: 811h/2065d  Inode: 27001032    Links: 1\nAccess: (0664/-rw-rw-r--)  Uid: ( 1000/  braden)   Gid: ( 1000/  braden)\nAccess: 2015-08-30 21:30:35.578786598 -0600\nModify: 2015-08-30 21:30:35.578786598 -0600\nChange: 2015-08-30 21:30:35.578786598 -0600\n Birth: -\n$ stat test-l\n  File: ‘test-l’ -&gt; ‘test’\n  Size: 4           Blocks: 0          IO Block: 4096   symbolic link\nDevice: 811h/2065d  Inode: 27001033    Links: 1\nAccess: (0777/lrwxrwxrwx)  Uid: ( 1000/  braden)   Gid: ( 1000/  braden)\nAccess: 2015-08-30 21:30:42.074786598 -0600\nModify: 2015-08-30 21:30:41.426786598 -0600\nChange: 2015-08-30 21:30:41.426786598 -0600\n Birth: -\n</code></pre>\n\n<p>Not only does the symlink have a unique inode (that's a given) but there doesn't seem to be any information aside from the file name that I could use to conclude that \"yes, this is a symlink to the file I want\". If I use the filename, though, then I have to deal with regex-hell. This is something I would personally like to avoid since, in practice, the file names contain characters like space, meta-characters (<code>?![]{}.,</code>), and unicode characters.</p>\n\n<p>I would also like to avoid things like awk, perl, crazy hacks that exploit bugs/design-flaws in bash 4.2.XX, and other weird stuff that probably wouldn't work properly (if at all) on a fresh install of, e.g, Arch Linux or CentOS. I should basically be able to run said command/script out-of-the-box on a system that lacks awk, sed, perl, ruby, and python, and runs bash-4.1 as its shell.</p>\n\n<p>If that isn't possible, then I would at least prefer the script/command use/be ubiquitous, like <code>vi</code>, <code>cat</code>, <code>ls</code>, etc.</p>\n\n<p>The bare minimum of my requirements is that the solution:</p>\n\n<ul>\n<li>can delete a file and all of its symlinks with only the original file as an argument</li>\n<li>can do so without knowing the names or locations of said symlinks</li>\n<li>can do so on symlinks of varying names and varying locations</li>\n<li>works in a fresh, minimal install of Arch Linux (or similar minimal system)</li>\n<li>is not a code-golf</li>\n<li>regexes reasonable and easy-to-understand</li>\n</ul>\n\n<p>This is how I try to design my own scripts, so I consider it reasonable. But I nonetheless hope it isn't too demanding.</p>\n\n<p>Thanks.</p>\n\n<hr>\n\n<p>Edit: I feel like I'm obligated to show my work. Just requesting a script makes me feel like a jerk. So, this is what I have:</p>\n\n<pre><code>get_lnk(){\n    gl_file=\"$1\"\n    gl_orig_a=( $(ls -l \"$gl_file\") )\n    gl_orig=\"${gl_orig_a[-1]}\"\n}\nfor i in *; do \n    get_lnk \"$i\"\n    echo \"file: $gl_file\"\n    echo \"links to: $gl_orig\"\n    echo\ndone\n\n# output:\n\nfile: file-l\nlinks to: ../file\n\nfile: file-l2\nlinks to: ../file\n</code></pre>\n\n<p>This prints the name of the symlink and the name of the file it points to. This is actually the opposite of what I'm trying to do, but is reasonably useful (when all the links are in the same place).</p>\n"},{"id":56339,"title":"How to create a soft or symbolic link?","body":"<p>I am installing p4v in <code>/opt</code>, but <code>/usr/bin</code> is on my path.  Is it possible to create a soft or symbolic link for p4v from <code>/opt</code> to <code>/usr/bin</code>, so I can just type \"p4v\" since <code>/usr/bin</code> is in my path?</p>\n"},{"id":613375,"title":"how to create a symbolic link that works relative to the working directory","body":"<p>consider the following :</p>\n\n<pre><code>x/\n    ph/\n        file1.txt -&gt; ./../file1.txt\n    file1.txt\ny/\n    ph/ -&gt; /x/ph/ (this is full absolute path of x/ph)\n    file1.txt\n</code></pre>\n\n<p><code>/y/ph</code> is a symlink for <code>ph</code> folder in <code>x</code>. and <code>file1.txt</code>is a relative symlinks.</p>\n\n<p>it works correctly in <code>x</code> folder however if you open \n<code>/y/ph/file1.txt</code> instead of opening <code>/y/file1.txt</code> it opens <code>/x/file1.txt</code></p>\n\n<p>the goal here is to have the same directory (lets say a program) in multiple places with different config files without having to have multiple copies of the program.</p>\n\n<p>according to <code>ln</code>'s help</p>\n\n<blockquote>\n  <p>Symbolic links can hold arbitrary text; if later resolved, a relative link is interpreted in relation to its parent directory.</p>\n</blockquote>\n\n<p>so relative links are relative to the actual folder's path not the current working directory. <strong>the question is :</strong> is there any workarounds for this ?</p>\n\n<p>test case:</p>\n\n<pre><code>mkdir x y x/ph\necho x1 &gt; ./x/file1.txt\necho y1 &gt; ./y/file1.txt\nln -s $(pwd)/x/ph ./y/ph\ncd ./x/ph\nln -s ./../file1.txt\ncd ../..\ncat ./x/ph/file1.txt\ncat ./y/ph/file1.txt\n</code></pre>\n\n<p>expected result is <code>x1 y1</code> but you get <code>x1 x1</code></p>\n\n<p><strong>Edit:</strong></p>\n\n<p>to make the question clearer, run the test case in an empty folder.\nand try the following commands in the folder:</p>\n\n<pre><code>bor@borpc:~/tmp$ readlink -f ./x/ph/file.txt\n/home/bor/tmp/x/ph/file.txt\nbor@borpc:~/tmp$ readlink -f ./y/ph/file.txt\n/home/bor/tmp/x/ph/file.txt\n--------------^\n</code></pre>\n\n<p>i want that <code>x</code> there to be <code>y</code>. that is to make the relative symlink resolve based on <code>pwd</code> (current working directory or path used to access it) rather than the actual path of the actual file.</p>\n\n<p>if it is possible how would one achieve such behavior.</p>\n"},{"id":474344,"title":"how to find symbolic link for a specific file","body":"<p>i want to know how to find if a certain file has a symbolic link to another file?</p>\n\n<p>the LN command </p>\n\n<pre><code># ln -s /etc/kannel.conf /etc/kannel/kannel.conf\n</code></pre>\n\n<p>how to confirm this symbolic link?</p>\n"},{"id":524606,"title":"Creating a symbolic link to a directory","body":"<p>I have a directory to which I want to create a symbolic link. The commands I used were:</p>\n\n<pre><code>cd workspace_b4a\ncd android-sdk-linux\nln -sv build-tools/20.0.0/lib/ platform-tools/lib\n</code></pre>\n\n<p>The output was:</p>\n\n<pre><code>‘platform-tools/lib’ -&gt; ‘build-tools/20.0.0/lib/’\n</code></pre>\n\n<p>However, Nautilus says that <code>platform-tools/lib</code> is a broken link and <code>ls -l platform-tools/lib</code> shows the both <code>build-tools/20.0.0/lib/</code> and <code>platform-tools/lib</code> in red. What am I doing wrong?</p>\n"},{"id":429247,"title":"How to find and list all the symbolic links created for a particular file?","body":"<p>I had created many symbolic links on various paths for a particular file or a directory. I want the whole list of created symbolic links paths (location).</p>\n\n<h3>Example:</h3>\n\n<p>I created symbolic links for <code>~/Pictures</code> directory on many directories. How do I list all the symlinks to that <code>~/Pictures</code> directory?</p>\n\n<p>Is that possible? If yes, then how?</p>\n"},{"id":470708,"title":"How to fix symbolic links after switching from Bash to ZSH","body":"<p>I had <code>bash</code> as my default shell even though I was only using <code>zsh</code>.</p>\n\n<p>I always started it myself by opening the terminal and typing <code>zsh</code>.</p>\n\n<p>Today I decided to use it as my default shell. So I found <a href=\"http://superuser.com/questions/231735/how-do-i-change-my-default-shell-from-bash-to-zsh\">this link</a> and ran the following command</p>\n\n<pre><code>sudo chsh -s $(which zsh) john\n</code></pre>\n\n<p>where <code>john</code> is my user.</p>\n\n<p>It all worked fine until I tried accessing my bank's website and noticed that the symbolic link I had created for the Java Chrome Plugin didn't work anymore.</p>\n\n<p>I tried deleting it and creating a new one via <code>zsh</code> with this command:</p>\n\n<pre><code>sudo ln -s /opt/jre1.7.0_55/lib/amd64/libnpjp2.so\n</code></pre>\n\n<p>but it didn't work. Should I do something different now that I'm using <code>zsh</code>? How do I get my symbolic links working again?</p>\n"},{"id":417837,"title":"How to make the path of a symbolically linked directory the exactly the path of the original directory?","body":"<p>I have created a symbolic link on my desktop that links to my <code>/var/www/wordpress</code> dir via</p>\n\n<pre><code>$ ln -s /var/www/wordpress/ ~/Desktop/wordpress-link\n</code></pre>\n\n<p>When I open bash and <code>cd</code> into <code>~/Desktop/wordpress-link</code> I notice that the path is: </p>\n\n<pre><code>max@laptop:~/Desktop/wordpress-link\n</code></pre>\n\n<p>Running <code>pwd</code> shows me the same path as above. When I do <code>ls</code> I see asterixis next to most of the files. If I open a file in Sublime Text while in <code>max@laptop:~/Desktop/wwwordpress</code> I can see that the path of the file is actually <code>/var/www/wordpress/file-name.php</code> so I know I am linked to the proper file. The problem is that it just feels messed up to see bash telling me that I am in <code>~/Desktop/wordpress-link</code> when I am really in <code>/var/www/wordpress/</code>. Also the asterixis are unsettling.</p>\n\n<p>Is there a way to make it so that when I <code>cd</code> or click into <code>~/Desktop/wordpress-link</code> that I will actually be in the linked dir and see <code>/var/www/wordpress</code> as my path name?</p>\n"},{"id":377938,"title":"Is a shortcut and symbolic link the same? If not, how do I create a shortcut?","body":"<p>I found this link on Wikipedia: <a href=\"http://en.wikipedia.org/wiki/Symbolic_link\" rel=\"nofollow\">http://en.wikipedia.org/wiki/Symbolic_link</a>\nAccording to them Symlinks are not really shortcuts.</p>\n\n<p>I had the need to create a shortcut to a program on the Desktop and I wanted to do this using a terminal command. I could not find one. Rather I bumped into the <strong>ln</strong> command which does pretty much the same (to my knowledge).</p>\n\n<p>So if it's not the same, how do I create a shortcut?</p>\n\n<p>Thanks!</p>\n"},{"id":114721,"title":"symbolic link to /opt","body":"<p>How do you :</p>\n\n<p>\"Create as administrator (sudo) one link in /usr/bin to the command that\nyou'd like to call (for example with8.5 and tclsh8.5). One time that you\nhad create the links you can run directly tclsh8.5 or wish8.5 in one\nterminal.\"</p>\n\n<p><a href=\"http://community.activestate.com/node/7489\" rel=\"nofollow\">http://community.activestate.com/node/7489</a></p>\n\n<p>Does that mean to link to the particular binary from the /opt directory?</p>\n"}]}]