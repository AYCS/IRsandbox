[{"id":633303,"title":"docker container with apache2","body":"<p>I installed docker with the packages <code>docker.io</code> and <code>lxc</code>.\nI wanted to test docker while I create an apache2 webserver. \nI created the container with</p>\n\n<pre><code>sudo docker.io run -i -t -p :8080 ubuntu:14.10 /bin/bash\n</code></pre>\n\n<p>Than I installed apache2 with </p>\n\n<pre><code>apt-get install apache2\n</code></pre>\n\n<p>After I modified the ports.conf that the apache2 listen to port 8080 I started the apache2 service.\nAfter the call to the IP on port 8080 on the browser I don't get a result.</p>\n\n<p>Do I have to note something else?\nThanks</p>\n","related_questions":[{"id":668822,"title":"Running apache2 server on ubuntu docker container","body":"<p>I am working on Ubuntu 14.04. I recently started to learn docker and I have a Ubuntu 14.04 container. I want to install and run apache2 on this container to get my hands dirty in cloud and servers. Can someone tell me the commands to run the apache2 server on a specific ip address(with port number) and URL?</p>\n"},{"id":620930,"title":"How do I autostart docker container at system reboot?","body":"<p>As I hosted a WordPress site in docker containers and i want these containers to be started at boot time always, so need to done it manually.</p>\n"},{"id":694029,"title":"DNS not resolving using Docker + Vagrant on Ubuntu 14.04","body":"<p>I've enabled my-example.com in a Docker container running apache2 on vagrant running on top of native ubunutu 14.04.  </p>\n\n<p>In the Vagrantfile I've mapped Vagrant port 80 to 8086 on the Ubuntu host</p>\n\n<p>config.vm.network \"forwarded_port\", guest: 80, host:8086.</p>\n\n<p>I can connect to the web page using ip 192.168.0.12:8086/index.html but I cannot access the page using the domain name www.my-example.com:8086/index.html</p>\n\n<p>I've installed the DNS plugin in Ubuntu and included the following in the Vagrant file:</p>\n\n<p>config.dns.tld = \"com\"\nconfig.dns.patterns = [/^.my-example.com$/]</p>\n\n<p>I've explicitly specified the following in the etc/hosts file on the host Ubuntu 14.04 yet cannot access www.my-example.com:8086/index.html</p>\n\n<p>192.168.0.12:8086  my-example.com</p>\n\n<p>127.0.0.1:8086  my-example.com</p>\n\n<p>Am going in circles trying to get the DNS right; any help will be much appreciated.</p>\n"},{"id":691151,"title":"Docker container network connection","body":"<p>I have installed Docker 1.8.3 in Ubuntu 14.04. At first my containers seemed have a properly functioning network connection. I was able to execute an \"apt-get update\" from a Ubuntu container and it performed the update successfully. But after just a day or so not only will apt-get not work, but a simple \"ping google.com\" will also not work.</p>\n\n<p>I suspect that it is an issue with the MASQUERADE rule in my iptable. \"sudo iptables -L -t nat -n\" gives me the following output:</p>\n\n<pre><code>Chain PREROUTING (policy ACCEPT)\ntarget prot  opt  source      destination \nDOCKER all   --   0.0.0.0/0   0.0.0.0/0     ADDRTYPE match dst-type LOCAL\n\nChain INPUT (policy ACCEPT)\ntarget prot opt source destination\n\nChain OUTPUT (policy ACCEPT)\ntarget  prot  opt source       destination \nDOCKER  all   --  0.0.0.0/0    !127.0.0.0/8     ADDRTYPE match dst-type LOCAL\n\nChain POSTROUTING (policy ACCEPT)\ntarget      prot opt source          destination \nMASQUERADE  all  --  172.17.0.0/16    0.0.0.0/0\n\nChain DOCKER (2 references)\ntarget prot opt source destination\n</code></pre>\n\n<p>Based on other posts I have seen I was expecting the MASQUERADE line to have the same IP address for the destination as is in the source. I am not sure about this though because I have tried uninstalling and reinstalling Docker and the following command:</p>\n\n<pre><code>sudo apt-get install bridge-utils\npkill docker\niptables -t nat -F\nifconfig docker0 down\nbrctl delbr docker0\nsudo service docker start\n</code></pre>\n\n<p>and both approaches resulted in the same iptable configuration. I have also tried:</p>\n\n<pre><code>sudo docker daemon -b testbr0\n</code></pre>\n\n<p>and got the following result:</p>\n\n<pre><code>INFO[0000] Listening for HTTP on unix (/var/run/docker.sock) \nINFO[0000] [graphdriver] using prior storage driver \"aufs\" \nINFO[0000] Option DefaultDriver: bridge \nINFO[0000] Option DefaultNetwork: bridge \nINFO[0000] Firewalld running: false \nFATA[0000] Error starting daemon: Error initializing network controller: Error creating default \"bridge\" network: bridge device with non default name testbr0 must be created manually\n</code></pre>\n\n<p>Based on some older post I found I expected this to create a new MASQUERADE rule.</p>\n\n<p>If anybody has any ideas on what else to try please share. The next thing i am thinking about is to try to install an older version of Docker to see if I have the same problem or not.</p>\n"},{"id":563680,"title":"Ubuntu for Docker Containers","body":"<p>Is Ubuntu a suitable distro for using inside a Docker container? If so, how does the Ubuntu installed by </p>\n\n<pre><code>docker pull ubuntu\n</code></pre>\n\n<p>differ from Ubuntu 14.04?</p>\n"},{"id":630625,"title":"Question with connecting to Docker container on virtualized Ubuntu server","body":"<p>As a web designer I have been using VirtualBox to set up temporary work servers for my projects. Lately I've been  trying to reduce the number of virtual machines on my laptop(due to limitations of SSD capacity) and I thought learning and using Docker may be beneficial in terms of system storage, deployment of finished work, and in futureproofing my skillsets.\nUntil now, I have been using host-only adapter in addition to NAT to connect to APM server in my virtualmachine from my host(which is usualy Windows).</p>\n\n<p>The following is /etc/network/interfaces setting I normally use:</p>\n\n<pre><code># The loopback network interface\nauto lo\niface lo inet loopback\n\n# The primary network interface\nauto eth0\niface eth0 inet dhcp\n\n# VBOX Host-only adapter\nauto eth1\niface eth1 inet static\n  network    192.168.56.0\n  address    192.168.56.80\n  netmask    255.255.255.0\n</code></pre>\n\n<p>I am thinking about IP aliasing to assign more IPs to the Host-only adapter(<code>192.168.56.81, 192.168.56.82...</code>) and routing each of them to each of the containers, which will each be running one of my projects. It looks like Docker gets to have its own network interface, <code>docker0</code>, which cannot be accessed from the VirtualBox host machine. From what I can tell, I have a few possible approaches:  </p>\n\n<ol>\n<li>route the connection from the host to the host-only adapter to the\ndocker0 interface</li>\n<li>somehow find a way to connect to the docker0 interface from the host\nmachine, or</li>\n<li>somehow find a way to connect the containers to host-only interfaces</li>\n</ol>\n\n<p>I want to know which one of these approaches is the most viable way for me to take.<br>\nI am not sure if my question if clear enough. Please let me know if I should be providing more information in order to make this question answerable.</p>\n"},{"id":630919,"title":"Docker container on a virtual Ubuntu Server","body":"<p>Is it possible to install docker.io on an ubuntu server in a virtual environment?\nMaybe on a vserver of a hosting provider?\nThanks</p>\n"},{"id":603464,"title":"Not search send file in docker container","body":"<p>How to send directory or zip file in Docker container\nand who path save this file in docker</p>\n"},{"id":587536,"title":"Forwarding interfaces inside a docker container","body":"<p>I have created a docker container executing the following command</p>\n\n<pre><code>docker run -it --net=none --cap-add=NET_ADMIN --name firewall ubuntu /bin/bash\n</code></pre>\n\n<p>after I have attached it two interfaces <code>eth0</code> and <code>eth1</code>. I need to forward traffic from eth1 to eth0. I have installed <code>iptables</code> and applying the following simple rule:</p>\n\n<pre><code>iptables -A FORWARD -i eth1 -o eth0 -j ACCEPT\n</code></pre>\n\n<p>I have checked out that traffic arrive to interface eth1 by listening with tcpdump the interface eth1. Unfortunately I don't know the reason why the traffic is not forwarded to eth0. Any idea? All the flags have been properly set up to 1 on the system</p>\n"}]}]