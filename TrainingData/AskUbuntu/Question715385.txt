[{"id":715385,"title":"How to create package including source codes, which compile during installation","body":"<p>Is it possible to create a deb package for Ubuntu, which contains source codes and automatically compiles them into executable during its installation?</p>\n\n<p>I haven't found any tutorials for this, only tutorials about \"how to compile package from sources\", which is quite different thing from what i want. That makes me think, this might not be a good idea.</p>\n\n<p>So, is this possible at all, and if yes, is it a good idea?</p>\n","related_questions":[{"id":102391,"title":"Is it better to compile from source or to install from a .deb package?","body":"<p>Sometimes, when downloading software from the Internet, I find that there is a .deb package ready for either my Debian/Ubuntu and also a tarball to be compiled. In the beginning I would simply use the package for its ease of installation, and wouldn't even dare attempting to compile. Even the sound of it scared me a bit. Nowadays, however, when I have the option I sometimes find myself in a dilemma: is there an unpopular advantage to compiling from source compared with the .deb package? I hope to find out here, thank you.</p>\n"},{"id":613485,"title":"How can I know which options have been passed to ./configure while compiling / building a Debian package?","body":"<p><strong>To close voters</strong>: This question is different from the question linked, because its scope is to find the options passed to ./configure during the building of a generic Debian package, not only to find the options passed to ./configure during the building of the Debian packages available in the repositories.</p>\n\n<p>As the title said, I've unpacked a Debian package in order to recompile / rebuild it adding a custom option, but I can't sort out how to find the options passed to ./configure when the package was compiled / built in first place. Is finding such options feasible?</p>\n"},{"id":600261,"title":"What are the implications of compiling packages from source?","body":"<p>What are the implications of compiling packages from source? For example, what if doing sudo apt-get upgrade upgrades a dependency of the manually-installed package? How would using a package from the PPA differ in this respect?</p>\n\n<p>Another implication is that it cannot be automatically updated by the package management system (How would you update it manually to keep the settings of the package if it's an application)?</p>\n\n<p>I want to ensure reasonably compatibility and stability while using some programs that need to be compiled from source (aren't available in the default repos or third-party repos). Are there ways to make this possible? What about a package from the PPA?</p>\n\n<p>Thanks!</p>\n"},{"id":562207,"title":"I need help compiling evince from source package on Ubuntu 14.10","body":"<p>After obtaining build-dependencies and source code for Evince document viewer through</p>\n\n<pre><code>sudo apt-get build-dep evince\napt-get source evince\n</code></pre>\n\n<p>on ubuntu 14.10, I run configure script and got the following error:</p>\n\n<pre><code>Requested 'gtk+-3.0 &gt;= 3.14.0' but version of GTK+ is 3.12.2\n</code></pre>\n\n<p>Is this bug in the source package, or am I missing something?</p>\n"},{"id":314009,"title":"How do I prevent apt-get from upgrading packages built from source with apt pinning?","body":"<p>I have a package installed (xcp-xapi) which is prone to a bug. The fix is very simple (only a couple of lines in the code) so what I do is the following:</p>\n\n<pre><code>apt-get source xcp-xapi\n</code></pre>\n\n<p>Then I find the source file to apply the fix and then I run again</p>\n\n<pre><code>apt-get -b source xcp-xapi\n</code></pre>\n\n<p>This will produce some .deb files that I install using</p>\n\n<pre><code>dpkg -i *.deb\n</code></pre>\n\n<p>Now the problem is that every time I try to run an apt-get upgrade, apt tries to fetch the packages from the repositories. I guess this can be fixed using pinning, but I cannot find the proper configuration to put in high priority the packages I compiled on my own.</p>\n\n<p>So the question is how can I configure pinning to put the following already installed packages on higher priority than any existing in the repositories?</p>\n\n<pre><code># apt-cache policy xcp-networkd xcp-v6d xcp-xapi xcp-xapi-debug\nxcp-networkd:\n  Installed: 1.3.2-5ubuntu0.1\n  Candidate: 1.3.2-5ubuntu0.1\n  Version table:\n     1.3.2-5ubuntu0.1 0\n        500 http://ftp.uninett.no/ubuntu/ precise-updates/universe amd64 Packages\n        500 http://security.ubuntu.com/ubuntu/ precise-security/universe amd64 Packages\n *** 1.3.2-5ubuntu0.1 0\n        100 /var/lib/dpkg/status\n     1.3.2-5 0\n        500 http://ftp.uninett.no/ubuntu/ precise/universe amd64 Packages\nxcp-v6d:\n  Installed: 1.3.2-5ubuntu0.1\n  Candidate: 1.3.2-5ubuntu0.1\n  Version table:\n     1.3.2-5ubuntu0.1 0\n        500 http://ftp.uninett.no/ubuntu/ precise-updates/universe amd64 Packages\n        500 http://security.ubuntu.com/ubuntu/ precise-security/universe amd64 Packages\n *** 1.3.2-5ubuntu0.1 0\n        100 /var/lib/dpkg/status\n     1.3.2-5 0\n        500 http://ftp.uninett.no/ubuntu/ precise/universe amd64 Packages\nxcp-xapi:\n  Installed: 1.3.2-5ubuntu0.1\n  Candidate: 1.3.2-5ubuntu0.1\n  Version table:\n     1.3.2-5ubuntu0.1 0\n        500 http://ftp.uninett.no/ubuntu/ precise-updates/universe amd64 Packages\n        500 http://security.ubuntu.com/ubuntu/ precise-security/universe amd64 Packages\n *** 1.3.2-5ubuntu0.1 0\n        100 /var/lib/dpkg/status\n     1.3.2-5 0\n        500 http://ftp.uninett.no/ubuntu/ precise/universe amd64 Packages\nxcp-xapi-debug:\n  Installed: 1.3.2-5ubuntu0.1\n  Candidate: 1.3.2-5ubuntu0.1\n  Version table:\n     1.3.2-5ubuntu0.1 0\n        500 http://ftp.uninett.no/ubuntu/ precise-updates/universe amd64 Packages\n        500 http://security.ubuntu.com/ubuntu/ precise-security/universe amd64 Packages\n *** 1.3.2-5ubuntu0.1 0\n        100 /var/lib/dpkg/status\n     1.3.2-5 0\n        500 http://ftp.uninett.no/ubuntu/ precise/universe amd64 Packages\n</code></pre>\n"},{"id":498091,"title":"How can I fix library conflicts during compilation stemmed from manually installed packages from source code?","body":"<p>I have Ubuntu 14.04 upgraded from 12.04 making dist-upgrades. I did many manual installations such as <strong>ffmpeg</strong>, <strong>libglib</strong> and so on, in the past.  I have a nice custom distro now, it works well but I have problems while trying to compile applications. The errors I got taught me lots, I found how to deal with linker errors, I list some of them below:</p>\n\n<p><a href=\"http://stackoverflow.com/questions/23174207/how-can-i-guide-compiler-to-use-a-certain-library\">how-can-i-guide-compiler-to-use-a-certain-library</a></p>\n\n<p><a href=\"http://askubuntu.com/questions/468661/how-to-fix-pkg-prog-pkg-config-command-not-found-error\">how-to-fix-pkg-prog-pkg-config-command-not-found-error</a></p>\n\n<p><a href=\"http://askubuntu.com/questions/488187/pkg-config-modversion-glib-2-0-reports-older-version\">pkg-config-modversion-glib-2-0-reports-older-version</a></p>\n\n<p><a href=\"http://stackoverflow.com/questions/22442921/how-to-fix-libgmodule-2-0-so-0-could-not-read-symbols-invalid-operation-erro\">how-to-fix-libgmodule-2-0-so-0-could-not-read-symbols-invalid-operation-erro</a></p>\n\n<p><a href=\"http://unix.stackexchange.com/questions/141195/multiple-ffmpeg-library-paths-how-can-exclude-older-ffmpeg-installations\">multiple-ffmpeg-library-paths-how-can-exclude-older-ffmpeg-installations</a></p>\n\n<p><a href=\"http://stackoverflow.com/questions/22531755/how-can-i-use-a-particular-library-while-compiling\">how-can-i-use-a-particular-library-while-compiling</a></p>\n\n<p>I come to such a point that even I can get errors while compiling native Ubuntu applications such as <strong>unity</strong> (I want to embed <strong>unity launcher</strong> into <strong>cairo dock</strong> <a href=\"http://glx-dock.org/ww_page.php?p=Cairo-Dock%20and%20Unity&amp;lang=en\" rel=\"nofollow\">unity launcher in cairo dock</a>)</p>\n\n<p>How can I fix those library conflicts? I lost manually  compiled application's directories so I have no chance to run <code>make uninstall</code>.</p>\n\n<p>I am fed up with adjusting library paths.\nWhat do you suggest me in this position?</p>\n"},{"id":240027,"title":"How to create a .deb package from compiled source files?","body":"<p>Question:</p>\n\n<p>Mono 3.0 is out, but I found no ppa from where I could install it.</p>\n\n<p>There is this one:\n<a href=\"https://launchpad.net/~directhex/+ppa-packages\">https://launchpad.net/~directhex/+ppa-packages</a></p>\n\n<p>but it's mono 2.10.8.1-5.</p>\n\n<p>I'm playing with ASP.NET MVC4, which is why I need the 3.0 release.</p>\n\n<p>Now I can compile &amp; install mono 3.0 myself. \nHow I do it, I tutorialized here:\n<a href=\"http://ubuntuforums.org/showthread.php?t=1591370\">http://ubuntuforums.org/showthread.php?t=1591370</a></p>\n\n<p>My problem now is, for every new ubuntu installation I have/want to make (server, laptop, desktop, renewed installation when HD breakes) I need to go through this lengthy procedure again.</p>\n\n<p>So I want to compile it once, and then upload it to a PPA, so that I (and everybody else) don't need to install it from source again.</p>\n\n<p>Now the question:\nThe entire build process needs configure run with options, post-configure makefile fixes, post-configure sourcecode fixes, etc.</p>\n\n<p>Is there an easy way I can create .deb packages from the already compiled files ?</p>\n\n<p>So that in the installation script, I only need to write several times:</p>\n\n<pre><code>cd package_directory_1/\nmake install\ncd package_directory_2/\nmake install\ncd package_directory_3/\nmake install\n</code></pre>\n\n<p>etc. </p>\n\n<p>?</p>\n"},{"id":280847,"title":"Installing source code in a package manger","body":"<p>So, in my quest to start learning more about Linux, I want to start compiling software.</p>\n\n<p>Note: any additional information or side information is greatly appreciated</p>\n\n<p>I have a program that I wish to install from github:</p>\n\n<p><a href=\"https://github.com/Grive/grive\" rel=\"nofollow\">https://github.com/Grive/grive</a></p>\n\n<p>Is there any way I can add this as a repository? and automatically get the files from it when there is an update?</p>\n\n<p>If not, obviously I'd have to compile myself. It's a little confusing because (I know what compiling actually does - high level language to binary) sometimes you have to make, sometimes you have to ./configure, ect.</p>\n\n<p>Not to mention you have to keep the files all in the same folder you compiled in, which is really annoying because I dont know if additional files are being moved somewhere on my system, and I can't delete them simply by removing the folder which I compiled in...</p>\n\n<p>Anyways, at one point or another I probably sounded really stupid trying to explain my understanding - </p>\n\n<p>tl;dr</p>\n\n<p>How do I turn source code into something my package manager can use for automatic updating with apt?</p>\n"},{"id":158660,"title":"Will a package I compile myself perform better than installing from the repositories?","body":"<p>Does a package performance is different when it's compiled from sources, or installed from repository ? Is it possible, what during the compilation, the package will be \"more adapted\" (performance, stability) to Your system, if it's compiled on it ?</p>\n"},{"id":148621,"title":"How can I create a temporary sandbox to compile from source?","body":"<p>I want to follow the steps found <a href=\"http://appdb.winehq.org/objectManager.php?sClass=version&amp;iId=19141\" rel=\"nofollow\">here</a> in order to run League of Legends under Ubuntu. According to the guide, I have to compile wine from source because it needs some patches. </p>\n\n<p>Compiling from source involves downloading quite a few dependency packages which I don't want to get mixed with the system and thus I'm wondering if there's a way to somehow isolate the whole \"download dependencies packages and compile\" process as I am only interested in the final wine binary.</p>\n\n<p>By isolating the compile process I can just copy the resulting binary and do a simple delete on the sandbox whereas doing it the naive way would require a more complex cleanup.</p>\n"}]}]