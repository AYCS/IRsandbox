[{"id":715765,"title":"Mysterious behavior of echo command","body":"<p>When we need to use escape sequence characters with <code>echo</code> command we must use the <code>-e</code> option. Like  </p>\n\n<pre><code>echo -e \"Enter your name : \\c\"\n</code></pre>\n\n<p>But when we include such kind of statements inside a shell program (.sh file), it produces a mysterious error. It prints </p>\n\n<pre><code>-e Enter your name : \n</code></pre>\n\n<p>It doesn't need that <code>-e</code> option with echo command as if we write like this</p>\n\n<pre><code>echo \"Enter your name : \\c\"\n</code></pre>\n\n<p>It shows output with no errors, but that doesn't work in shell.</p>\n\n<p>So what is the reason? I am using bash shell and Ubuntu 15.04 version.</p>\n","related_questions":[{"id":713970,"title":"splitting user&#39;s input with read command","body":"<pre><code>echo -n \"# WHICH DAYS? #\"\nread day\n</code></pre>\n\n<p>assume user's input are: <code>100</code> <code>101</code> with one space between numbers. For example I need to extract first and second column value of day separately, which command gives this value? I tried below commands but they give whole array;</p>\n\n<pre><code>first_column_of_day=${day[${1}]}\necho \"$first_column_of_day\"\n\nsecond_column_of_day=${day[${2}]}\necho \"$second_column_of_day\"\n</code></pre>\n"},{"id":707839,"title":"Troubles piping echo output to xargs script for mv command","body":"<p>and thank you in advance for any advice.</p>\n\n<p>I'm working on a script that will automatically sort my downloads. The script is very simple, and running it manually has the intended effect. The problem I'm having is with the fswatch command that's intended to trigger the script - I can't get the output from echo correctly piped into xargs. Here's the command:</p>\n\n<pre><code>fswatch --event Created Downloads/ | (while read x; do echo $x | xargs -0 bash ./dlsort.sh; done)\n</code></pre>\n\n<p>and the script:</p>\n\n<pre><code>if (echo \"$1\" | grep -q '\\.jpg$'); then\n  mv \"$1\" Desktop/images/ &amp;\nelse\n  mv \"$1\" Downloads/other/ &amp;\nfi\n</code></pre>\n\n<p>I've determined what the issue is, I just don't know how to correct it. a newline character is getting put at the end of the filename, which causes the mv command to fail with a \"no such file or directory\" error in the script. I've been experimenting with quite a few variations in both the echo and fswatch commands, but nothing I've tried has worked.</p>\n\n<p>Thanks again to anyone who can help with this</p>\n"},{"id":676575,"title":"echo -n not inputing anything, even though echo has no parameters","body":"<p>On the terminal, typing <code>echo -n</code>  will not output anything at all, if echo has no parameters, then why using parameter -n does nothing in echo at all? Note: Doing something like <code>echo nil -n nil</code> will work and output <code>nil -n nil</code>, so if echo outputs everything, then why doesn't it output <code>-n</code>, it should output <code>-n</code> not doing nothing.</p>\n"},{"id":627671,"title":"Bash script with loop does not echo","body":"<p>In this script, the second echo statement doesn't do anything.</p>\n\n<pre><code>     #!/bin/bash\n\necho \"Start folder create...\"\nfind . -name \"*.zip\" | while read filename; do\n foldername=\"${filename%.*}\";\n mkdir -p \"$foldername\";\n\n mv \"$filename\" \"$foldername\";\necho \"made directory $foldername\" ;\ndone; \n</code></pre>\n\n<p>All the other commands work. What did I do wrong?</p>\n"},{"id":641862,"title":"Make echo ignore spaces?","body":"<p>I have a file called temp1</p>\n\n<pre>\n   sCellEventTrap-03-27 TRAP-TYPE  -- CAC Code: 01\n        ENTERPRISE compaq\n        VARIABLES  { scellNameDateTime,\n                     scellSWComponent,\n                     scellECode,\n                     scellCAC,\n                     scellEIP}\n        DESCRIPTION\n             \"Severity: Critical -- failure or failure imminent. A physical disk drive has experienced an ID block inconsistency.\"\n           --#TYPE      \"StorageCell Event\"\n           --#SUMMARY   \"SCellName-TimeDate %s : SWCID %d : ECode: %d : CAC %d : EIP %d.\"\n           --#ARGUMENTS {0,1,2,3,4,}\n           --#SEVERITY  CRITICAL\n           --#TIMEINDEX 136\n           --#STATE     WARNING\n        ::= 13600807\n</pre>\n\n<p>Applying this on temp1 </p>\n\n<blockquote>\n  <p>prvar=$(awk '/VARIABLES/,/DESCRIPTION/ {gsub(\"VARIABLES\",\" \"); gsub(\"DESCRIPTION\",\" \"); gsub(\"}\",\" \"); gsub(\"{\",\" \");gsub(\",\",\" \");print;print \":%s\"}' temp1)</p>\n</blockquote>\n\n<p>Gives me   (what I want)</p>\n\n<pre>\necho $prvar\n\nscellNameDateTime :%s scellSWComponent :%s scellECode :%s scellCAC :%s scellEIP :%s :%s\n</pre>\n\n<p>However this (the format not wanted)</p>\n\n<pre>\necho \"$prvar\" \n\n             scellNameDateTime \n:%s\n                     scellSWComponent \n:%s\n                     scellECode \n:%s\n                     scellCAC \n:%s\n                     scellEIP \n:%s\n\n:%s\n</pre>\n\n<p>I am to use <code>prvar</code> in <code>echo</code> along with text like this</p>\n\n<blockquote>\n  <p>echo  \"blah blah blah $prvar\"</p>\n</blockquote>\n\n<p>Doing this what I get</p>\n\n<pre>\nblah blah blah              scellNameDateTime \n:%s\n                     scellSWComponent \n:%s\n                     scellECode \n:%s\n                     scellCAC \n:%s\n                     scellEIP \n:%s\n\n:%s\n</pre>\n\n<p><strong>What I want it to print</strong></p>\n\n<pre>\n\nblah blah blah scellNameDateTime :%s scellSWComponent :%s scellECode :%s scellCAC :%s scellEIP :%s :%s\n\n</pre>\n\n<p>The <code>\"\"</code> on the prvar when using <code>echo</code> create the problem. What can I do so that prvar is printed in a just above format?        </p>\n\n<p><strong>EDIT</strong><br>\nWell turns out it doesnt make a difference whatever I type in my SCRIPT <code>echo \"$prvar\"</code> and <code>echo $prvar</code> print the same thing --- the format i don't want. The Terminal and the script are behaving differently. Any work around for this?</p>\n"},{"id":544416,"title":"Strang echo behavior","body":"<p>To boil it down: The following command in bash</p>\n\n<pre><code>echo $(ssh -t pi@doctor \"sudo stat -c \\\"%U\\\" /var/www/candy/example/index.html\")101\n</code></pre>\n\n<p>Gives the this result</p>\n\n<pre><code>Connection to doctor closed.\n101-data\n</code></pre>\n\n<p>While</p>\n\n<pre><code>echo $(ssh -t pi@doctor \"sudo stat -c \\\"%U\\\" /var/www/candy/example/index.html\")\n</code></pre>\n\n<p>gives</p>\n\n<pre><code>Connection to doctor closed.\nwww-data\n</code></pre>\n\n<p>Why is this?</p>\n\n<p>Backgroud: I'm using the for a script (calles ced.sh):</p>\n\n<pre><code>for ARG; do\n        name=${ARG##*/}\n        echo name=$name\n        path=${ARG%/*} \n        echo path=$path\n        owner=$(echo $(ssh -t $remote_user@$server \"sudo stat -c \\\"%U\\\" $ARG\"))\n        echo owner=$owner\n        group=$(echo $(ssh -t $remote_user@$server \"sudo stat -c \\\"%G\\\" $ARG\"))\n        echo group=$group\n        perms=$(echo $(ssh -t $remote_user@$server \"sudo stat -c \\\"%a\\\" $ARG\"))\n        echo perms=$perms\n        read -p \"Gibt es einen Dienst/Server, der auf diese Datei zurückgreift (notfalls leer lassen)? \" service\n        echo service=$service\n        echo \"name=\"\\\"$name\\\" \"path=\"\\\"$path/\\\" \"owner=\"\\\"$owner\\\" \"group=\"\\\"$group\\\" \"perms=\"$perms \"service=\"$service\ndone\n</code></pre>\n\n<p>It's purpose is to read out a few informations (e.g. owner, group, permissions) of files on a server, which I'd like to edit locally. The last line should produce an output that can be stored in a file. It would have been rewritten to:</p>\n\n<p>echo \"name=\"\\\"$name\\\" \"path=\"\\\"$path/\\\" \"owner=\"\\\"$owner\\\" \"group=\"\\\"$group\\\" \"perms=\"$perms \"service=\"$service >> \"$HOME/...bla bla...\"</p>\n\n<p>The output looks like this:</p>\n\n<pre><code>Software/EigeneProgramme/ced.sh -p /var/www/candy/example/index.html\nname=index.html\npath=/var/www/candy/example\nConnection to doctor closed.\nowner=www-data\nConnection to doctor closed.\ngroup=www-data\nConnection to doctor closed.\nperms=644\nGibt es einen Dienst/Server, der auf diese Datei zurückgreift (notfalls leer lassen)? apache\nservice=apache\n service=apacheta path=\"/var/www/candy/example/\" owner=\"www-data\n</code></pre>\n\n<p>I don't understand why echo produces the last line. It seems that it is writing to line in on. Did I miss to escape something?</p>\n\n<p>Thanks in advance.</p>\n"},{"id":533141,"title":"Why &#39;echo $(cat /path/to/fileName)&#39; list my files and folders?","body":"<p>I'm working on a text-processing to providing an answer for user's question on Au. When I want to try printout the content of the file by <code>echo $(cat /path/to/filename)</code>, it list my files and folders too. But when I try with <code>printf \"$(cat /path/to/filename)\\n\"</code> it works well.</p>\n\n<p>I tried also saving it into a variable <code>content='cat /path/to/filename'</code> (also <code>content=$(cat /path/to/filename</code>) and then print by <code>echo $content</code>, but I getting the same wrong result(list files and folders). </p>\n\n<p><strong>I want to store the content of the file into variable and pass the variable into my script as an input to next command.</strong></p>\n\n<p>Note that the content of my file has <code>*</code> character in it.</p>\n\n<p>Please see the examples:</p>\n\n<pre class=\"lang-bsh prettyprint-override\"><code>kasiya@kasiya-pc:~$ cat ~/test\n*Hello World!*\nkasiya@kasiya-pc:~$ echo $(cat ~/test)\n*Hello World!*\n------------------------------------------------------------------------------------------------------------------------------------------------------------\nkasiya@kasiya-pc:~$ cat ~/test\n*\nHello World!*\nkasiya@kasiya-pc:~$ echo $(cat ~/test)\nDesktop Documents Downloads Music Pictures Public Templates test Videos Hello World!*\n------------------------------------------------------------------------^^^^^^^^^^^^^------------------------------------------------------------------------\nkasiya@kasiya-pc:~$ cat ~/test\n*Hello World!\n*\nkasiya@kasiya-pc:~$ echo $(cat ~/test)\n*Hello World! Desktop Documents Downloads Music Pictures Public Templates test Videos\n^^^^^^^^^^^^^-----------------------------------------------------------------------------------------------------------------------------------------------\nkasiya@kasiya-pc:~$ cat ~/test\n*\nHello World!\n*\nkasiya@kasiya-pc:~$ echo $(cat ~/test)\nDesktop Documents Downloads Music Pictures Public Templates test Videos Hello World! Desktop Documents Downloads Music Pictures Public Templates test Videos\n------------------------------------------------------------------------^^^^^^^^^^^^------------------------------------------------------------------------\n</code></pre>\n\n<h2>Fantastic</h2>\n\n<pre class=\"lang-bsh prettyprint-override\"><code>kasiya@kasiya-pc:~$ cat ~/test\n*\nkasiya@kasiya-pc:~$ echo $(cat ~/test)\nDesktop Documents Downloads Music Pictures Public Templates test Videos\n</code></pre>\n\n<p>Then each <code>*</code> in my file cause to list my files and folders. Then how do i prevent it?</p>\n"},{"id":514514,"title":"echo command not giving correct output","body":"<p>I try to create output like <code>12DEC2013bhav.csv.zip</code> in the script below.  </p>\n\n<p>But it is giving me something like <code>12DEC.csv.zip</code> instead:</p>\n\n<pre><code>for (( i = 2013; i &lt;= 2014; i++ ))\ndo\n    for m in JAN FEB MAR APR MAY JUN JUL AUG SEP OCT NOV DEC\n    do\n        for (( d = 1; d &lt;= 31; d++))\n        do\n            echo \"$d$m$ibhav.csv.zip\"\n        done\n    done\ndone\n</code></pre>\n\n<p>How do I correct it?</p>\n"},{"id":488543,"title":"Echos, variables, and help with this question","body":"<p>The book Learning The Bash Shell says-</p>\n\n<blockquote>\n  <p>\"Notice that we used double quotes around variables (and strings containing them) in these echo examples. In Chapter 1, we said that some special characters inside double quotes are still interpreted, while none are interpreted inside single quotes.</p>\n  \n  <p>A special character that \"survives\" double quotes is the dollar sign—meaning that variables are evaluated. It's possible to do without the double quotes in some cases; for example, we could have written the above echo command this way:</p>\n</blockquote>\n\n<pre><code>$ echo The value of \\$ varname is \\\"$ varname \\\".\n</code></pre>\n\n<blockquote>\n  <p>But double quotes are more generally correct. Here's why. Suppose we did this:</p>\n</blockquote>\n\n<pre><code>$ fred='Four spaces between these words.'\n</code></pre>\n\n<blockquote>\n  <p>Then if we entered the command # echo $fred, the result would be:</p>\n</blockquote>\n\n<pre><code>Four spaces between these words.\n</code></pre>\n\n<blockquote>\n  <p>What happened to the extra spaces? Without the double quotes, the shell splits the string into words after substituting the variable's value, as it normally does when it processes command lines. The double quotes circumvent this part of the process (by making the shell think that the whole quoted string is a single word).</p>\n  \n  <p>Therefore the command echo \"$fred\" prints this:</p>\n</blockquote>\n\n<pre><code>Four spaces between these    words.\n</code></pre>\n\n<blockquote>\n  <p>The distinction between single and double quotes becomes particularly important when we start dealing with variables that contain user or file input later on.\"</p>\n</blockquote>\n\n<p>MY QUESTION IS----</p>\n\n<p>I have tried to practice with this, but I am confused. Do I put-</p>\n\n<pre><code>$ echo The value of \\$ varname is \\\"$ varname \\\".\n$ fred='Four spaces between these words.'\n</code></pre>\n\n<p>in a file? Like enter # nano, then put it in there? Or do I just enter it into the terminal? Neither are working. When I entered # nano fred and put it in that file and made it executable and changed \"varname\" to \"fred\" and ran ./fred, I got this as a result-</p>\n\n<pre><code>The value of $fred is \"\"\n</code></pre>\n\n<p>HELP! What am I doing wrong?</p>\n"},{"id":434153,"title":"Echo command with color option in script and command works differently","body":"<p>If I run <code>echo -e \"\\e[1;31mThis is red text\\e[0m\"</code> in comand line, It prints out red text. </p>\n\n<p>However, if I use write it in script file <code>test.sh</code></p>\n\n<pre><code>#! /bin/bash\necho -e \"\\e[1;31mThis is red text\\e[0m\"\n</code></pre>\n\n<p>run <code>$ sh test.sh</code> </p>\n\n<p>It prints out \n<code>-e \\e[1;31mThis is red text\\e[0m</code></p>\n\n<p>Why they act differntly?</p>\n"}]}]