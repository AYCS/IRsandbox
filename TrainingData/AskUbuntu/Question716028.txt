[{"id":716028,"title":"Start a screen session inside LXD-managed container","body":"<p>I'd like to start a <code>screen</code> session inside an LXD-managed container so that I could detach running processes and maybe re-attach in the future when I want to check on their status.</p>\n\n<p>I tried to attach to the container running</p>\n\n<pre><code>$ lxc exec my-ubuntu -- /bin/bash\n</code></pre>\n\n<p>and then start a session with <code>screen -x</code>, but I get the following error:</p>\n\n<pre><code>Must be connected to a terminal.\n</code></pre>\n\n<p>I can see that many people have had a similar problem when trying to initiate <code>screen</code> from <code>ssh</code>, but I couldn't apply the suggested solution to my case.</p>\n","related_questions":[{"id":617865,"title":"Is there a way to configure lxd containers with cloud config at provision time?","body":"<p>Specifically, with the CLI tools- not openstack.</p>\n\n<p>I'm looking at what a local dev setup with lxd might look like but am coming up empty handed when it comes to configuring new containers.</p>\n\n<p>Are there any idiomatic (or otherwise) ways to configure lxd containers? Should I be looking at something more immutable like docker images?</p>\n\n<p>Thanks. Any resources or pointers would be appreciated.</p>\n"},{"id":650471,"title":"How do I allow /dev/net/Tun in a LXD managed LXC container?","body":"<p>I am trying to get Openvpn run inside a LXD/LXC container, and redirect traffic coming to the container to the VPN.</p>\n\n<p>The purpose is to replace a fully fledged VM that does exactly that (and toy with LXD :-)</p>\n\n<p>I managed to get an IP from my main DHCP server, set up the iptables rules for masquerading / forwarding the traffic, but when I try to launch openvpn, it is blocked by the lack of (access to) /dev/net/tun device.</p>\n\n<p>I came accross this post on ServerFault <a href=\"http://serverfault.com/questions/429461/no-tun-device-in-lxc-guest-for-openvpn\">http://serverfault.com/questions/429461/no-tun-device-in-lxc-guest-for-openvpn</a>, but it does not seem to work with current version of LXC and/or LXD managing the configuration...</p>\n\n<p>EDIT: I tried using this incantation, but it did not succeed:</p>\n\n<pre><code>lxc config set mycontainer raw.lxc 'lxc.cgroup.devices.allow = c 10:200 rwm'\n</code></pre>\n\n<p>EDIT2: tried <code>lxc config device add mycontainer tun unix-char path=/dev/net/tun major=10 minor=200</code> but on next stop/start, I got </p>\n\n<blockquote>\n  <p>error: Failed configuring device tun: Not implemented</p>\n</blockquote>\n\n<p>Now I can't even <code>lxc config device remove mycontainer tun</code> as it throws the same Not implemented error. Container seems to be lost...</p>\n"},{"id":665741,"title":"How to create a LXD container on a machine and register it in MAAS?","body":"<p>Is it possible to deploy a bare-metal machine with MAAS and create some LXD instances that are registered in a MAAS zone?</p>\n"},{"id":356006,"title":"kill a screen session","body":"<p>I'm trying to kill a screen session. I noticed a lot of other related questions, but none of those answers are working for me. I am trying to kill the following session:</p>\n\n<pre><code>screen -ls\nThere is a screen on:\n    23520.pts-6.porkypig    (09/30/2013 02:49:47 PM)    (Detached)\n1 Socket in /var/run/screen/S-root.\n\nscreen -r 23520.pts-6.porkypig\n</code></pre>\n\n<p>Now I am in the session. According to the documentation:</p>\n\n<p><a href=\"http://www.gnu.org/software/screen/manual/screen.html#Quit\">http://www.gnu.org/software/screen/manual/screen.html#Quit</a></p>\n\n<p>I am supposed to press \"control a\" and then \"control \\\". I do that and nothing happens.</p>\n\n<p>Another solution said to  press Ctrl + a and type :quit. However, again it doesn't do anything. In fact, pressing control + a, absolutely nothing happens afterwards except a message \"No Other Window\"</p>\n"},{"id":694349,"title":"LXD container refusing connections from the host","body":"<p>I'm pretty new to LXD having recently discovered it.  I'm making progress with the basic interactions with images and containers - it looks promising.</p>\n\n<p>Currently I am stuck on a problem connecting from the host to a service running in a local container.  This is my first time trying this.  I get a \"connection refused\" error.  More details below:</p>\n\n<pre><code>user@sparky1:~$ curl 10.0.3.49\ncurl: (7) Failed to connect to 10.0.3.49 port 80: Connection refused\nuser@sparky1:~$ \n</code></pre>\n\n<p>The host is Ubuntu Server 14.04 on my laptop - it's a new install and is pretty plain-vanila.  I let the system do all of the configuration (including the lxcbr0 bridge) and haven't changed any of the out-of-the-box defaults.</p>\n\n<p>I'm running a container based on a CentOSv6 image.  The container is started and inside I am running a web server.  From within the container I can connect to its local web server on port 80 just fine (by running \"curl hostname\").  It connects on the loopback IP 127.0.0.1  I get a valid response from the local web server from within the container.  Yay.</p>\n\n<p>A successful response (even though it's a 403 reponse):</p>\n\n<pre><code>[root@wc1 ~]# curl wc1\n&lt;!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\"&gt;\n&lt;html&gt;&lt;head&gt;\n&lt;title&gt;403 Forbidden&lt;/title&gt;\n&lt;/head&gt;&lt;body&gt;\n&lt;h1&gt;Forbidden&lt;/h1&gt;\n&lt;p&gt;You don't have permission to access /\non this server.&lt;/p&gt;\n&lt;hr&gt;\n&lt;address&gt;IBM_HTTP_Server at wc1 Port 80&lt;/address&gt;\n&lt;/body&gt;&lt;/html&gt;\n[root@wc1 ~]#\n</code></pre>\n\n<p>If I try connecting via the IP on the bridge, either from within the container or from the host then I get the mentioned \"connection refused\" error.</p>\n\n<p>So, I'm trying to figure out what it will take to allow connections from the host to the the web server running in the container.  I have spent a few hours googling and have not found the answer (or been too dense to recognize it).</p>\n\n<p>The firewall is disabled (\"ufw status\" says so).  What am I missing?  Thanks in advance.</p>\n"},{"id":692239,"title":"seccomp inside lxc container seems not working","body":"<p>I am trying to apply seccomp security policy inside lxc container. I wish to restrict the application running inside container from using system calls like <code>fork</code>, <code>fwrite</code>. </p>\n\n<p>I explored a given <code>seccomp.c</code> given inside lxc source code, which basically parses the whitelist of allowed system calls and accordingly loads and enforces the seccomp policy. The whitelist includes: <code>read, write, close, open</code>. </p>\n\n<p>Looking at this, my guess was, if an application running inside container attempts to use any other system call which is not in whitelist shall be blocked or prevented. </p>\n\n<p>To verify this I ran a simple c program inside container which tries to create new process using <code>fork</code>, and when I executed a program using <code>lxc-attach</code>, I found that it successfully attempted <code>fork</code> despite being it is not in whitelist.  </p>\n\n<p>Then where and how seccomp is enforced?</p>\n"},{"id":691039,"title":"Adding a shared host directory to an LXC/LXD Container","body":"<p>I have been experimenting with LXC/LXD on Ubuntu 14.04 and it's all working great. I just need to figure out how to get shared directories working between my host machine and a container so I can ditch Virtualbox once and for all.</p>\n\n<p>I have seen this page: <a href=\"https://wiki.gentoo.org/wiki/LXD\" rel=\"nofollow\">https://wiki.gentoo.org/wiki/LXD</a></p>\n\n<p>Which provides instructions, but I just keep getting errors. </p>\n\n<p>Does anyone know of any simple, clear instructions to get this working? Any help much appreciated.</p>\n"},{"id":618577,"title":"Cannot auto-start LXC containers created with LXD","body":"<p>I have created a lxc container easily with LXD tools however I couldn't find a way to auto-start it on reboot. (Ubuntu 15.04)</p>\n\n<p>For LXC it's said that adding <code>lxc.start.auto = 1</code> to the container config would be enough however I couldn't find the config file for the container created with LXD. I tried</p>\n\n<pre><code>lxc config set my_machine raw.lxc \"lxc.start.auto=1\"\n</code></pre>\n\n<p>without any luck. The configuration is saved but the container didn't start... Any ideas?</p>\n"},{"id":650546,"title":"How to persist configuration changes accross restart with LXD containers?","body":"<p>I am experimenting with LXD, but I'm stuck with a seamingly simple problem: I can't make my bridge config persistent.</p>\n\n<p>The host server has a birdge <code>br0</code>. By default, lxd managed containers will use <code>lxcbr0</code> and be on another network.</p>\n\n<p>What I want is a container that will get its IP from my main DHCP server, and share the same network as the rest of my servers.</p>\n\n<p>I managed to do so using this stanza:</p>\n\n<pre><code>lxc config set mycontainer raw.lxc 'lxc.network.link = br0'\n</code></pre>\n\n<p>This seems to work, but every now and then, the configuration gets lost, and the container falls back onto lxcbr0 !</p>\n\n<ul>\n<li>So, is this the right way to get my container to use br0 ?</li>\n<li>And what is the way to make this persistent for real ?</li>\n</ul>\n"},{"id":355965,"title":"finding what&#39;s running on screen session","body":"<p>I have this screen process which has open my serial port:</p>\n\n<pre><code>$ sudo lsof | grep /dev/ttyS0\n    screen    23520        root    6u      CHR               4,64         0t0       1421 /dev/ttyS0\n$ cd /proc/23520\n$ head -n 5 status\n    Name:   screen\n    State:  S (sleeping)\n    Tgid:   23520\n    Pid:    23520\n$ screen -ls\n    There is a screen on:\n        21200.pts-1.porkypig    (07/10/2013 12:25:42 PM)    (Detached)\n$ screen -r 21200.pts-1.porkypig\n</code></pre>\n\n<p>When I reattached to the screen session, to see exactly what it's doing. I see this long log of information. It seems like the result of \"tail -f\", that is, a continous log being output. </p>\n\n<pre><code>/proc/23520 $ cd cwd\n pwd\n/proc/23520/cwd\nls -l\n-rw-r--r--  1 root        root        2147 2013-10-07 17:55 minicom.log\n</code></pre>\n\n<p>When I switch into the directory (cwd) that this process was run from, I notice minicom.log, which makes me suspect the user ran something like \"tail -f minicom.log\".</p>\n\n<p>I know that in linux we can use history to track back commands that were run. But how can I confirm the command was run to display what I am currently looking at in my screen session? </p>\n"}]}]